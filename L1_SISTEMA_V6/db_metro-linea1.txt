-- Crear la base de datos si no existe
IF DB_ID(N'metro_linea1') IS NULL
    CREATE DATABASE metro_linea1;
GO

USE metro_linea1;
GO

-- Desactivar temporalmente la verificación de claves foráneas para facilitar la eliminación
EXEC sp_MSforeachtable "ALTER TABLE ? NOCHECK CONSTRAINT all"

-- Eliminar triggers existentes
IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'trg_notificacion_solicitud')
    DROP TRIGGER trg_notificacion_solicitud;
GO

-- Eliminar vistas existentes
IF EXISTS (SELECT * FROM sys.views WHERE name = 'vw_solicitudes_pendientes')
    DROP VIEW vw_solicitudes_pendientes;
GO

IF EXISTS (SELECT * FROM sys.views WHERE name = 'vw_turnos_hoy')
    DROP VIEW vw_turnos_hoy;
GO

IF EXISTS (SELECT * FROM sys.views WHERE name = 'vw_datos_conductor')
    DROP VIEW vw_datos_conductor;
GO

-- Eliminar funciones existentes
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'FN' AND name = 'fn_calcular_antiguedad')
    DROP FUNCTION fn_calcular_antiguedad;
GO

-- Eliminar procedimientos almacenados existentes
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_validar_solicitud_cambio')
    DROP PROCEDURE sp_validar_solicitud_cambio;
GO

IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_calcular_tiempo_entre_turnos')
    DROP PROCEDURE sp_calcular_tiempo_entre_turnos;
GO

-- Eliminar tablas en orden inverso de dependencias
IF OBJECT_ID('REPORTE', 'U') IS NOT NULL
    DROP TABLE REPORTE;

IF OBJECT_ID('PREFERENCIAS_NOTIFICACION', 'U') IS NOT NULL
    DROP TABLE PREFERENCIAS_NOTIFICACION;

IF OBJECT_ID('AUDITORIA', 'U') IS NOT NULL
    DROP TABLE AUDITORIA;

IF OBJECT_ID('NOTIFICACION', 'U') IS NOT NULL
    DROP TABLE NOTIFICACION;

IF OBJECT_ID('SOLICITUD_CAMBIO_TURNO', 'U') IS NOT NULL
    DROP TABLE SOLICITUD_CAMBIO_TURNO;

IF OBJECT_ID('TURNO', 'U') IS NOT NULL
    DROP TABLE TURNO;

IF OBJECT_ID('CONDUCTOR', 'U') IS NOT NULL
    DROP TABLE CONDUCTOR;

IF OBJECT_ID('PARAMETRO_SISTEMA', 'U') IS NOT NULL
    DROP TABLE PARAMETRO_SISTEMA;

IF OBJECT_ID('PLANTILLA_TURNO', 'U') IS NOT NULL
    DROP TABLE PLANTILLA_TURNO;

IF OBJECT_ID('SEMANA_PROGRAMACION', 'U') IS NOT NULL
    DROP TABLE SEMANA_PROGRAMACION;

-- Como última operación, eliminamos la tabla USUARIO
IF OBJECT_ID('USUARIO', 'U') IS NOT NULL
    DROP TABLE USUARIO;

-- Reactivar verificación de claves foráneas
EXEC sp_MSforeachtable "ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all"

-- Tabla USUARIO (con mejoras)
CREATE TABLE USUARIO (
    id_usuario INT IDENTITY(1,1) PRIMARY KEY,
    dni NVARCHAR(8) NOT NULL UNIQUE,
    nombres NVARCHAR(100) NOT NULL,
    apellidos NVARCHAR(100) NOT NULL,
    correo NVARCHAR(100) NOT NULL UNIQUE,
    telefono NVARCHAR(15),
    contacto_emergencia NVARCHAR(100),
    fecha_nacimiento DATE,
    contrasena_hash NVARCHAR(255) NOT NULL,
    rol NVARCHAR(15) NOT NULL CHECK (rol IN ('ADMINISTRADOR','CONDUCTOR')),
    foto_perfil NVARCHAR(255),
    estado NVARCHAR(10) NOT NULL DEFAULT 'ACTIVO' CHECK (estado IN ('ACTIVO','INACTIVO')),
    fecha_registro DATETIME2 DEFAULT GETDATE(),
    fecha_ultimo_login DATETIME2 NULL,
    token_recuperacion NVARCHAR(255) NULL,
    fecha_expiracion_token DATETIME2 NULL
);

CREATE INDEX idx_usuario_dni ON USUARIO(dni);
CREATE INDEX idx_usuario_rol ON USUARIO(rol);
CREATE INDEX idx_usuario_estado ON USUARIO(estado);

-- Tabla de parámetros del sistema
CREATE TABLE PARAMETRO_SISTEMA (
    id_parametro INT IDENTITY(1,1) PRIMARY KEY,
    clave NVARCHAR(50) NOT NULL UNIQUE,
    valor NVARCHAR(255) NOT NULL,
    descripcion NVARCHAR(255),
    fecha_modificacion DATETIME2 DEFAULT GETDATE()
);

-- Nueva tabla para semanas de programación
CREATE TABLE SEMANA_PROGRAMACION (
    id_semana INT IDENTITY(1,1) PRIMARY KEY,
    numero_semana INT NOT NULL,
    anio INT NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    estado NVARCHAR(15) DEFAULT 'BORRADOR' CHECK (estado IN ('BORRADOR','PUBLICADA','CERRADA')),
    CONSTRAINT uk_semana_anio UNIQUE (numero_semana, anio)
);

CREATE INDEX idx_semana_estado ON SEMANA_PROGRAMACION(estado);
CREATE INDEX idx_semana_fecha ON SEMANA_PROGRAMACION(fecha_inicio, fecha_fin);

-- Tabla CONDUCTOR (con mejoras)
CREATE TABLE CONDUCTOR (
    id_conductor INT IDENTITY(1,1) PRIMARY KEY,
    id_usuario INT NOT NULL,
    modalidad NVARCHAR(15) NOT NULL CHECK (modalidad IN ('FIJO','ROTATIVO')),
    base NVARCHAR(50) NOT NULL,
    fecha_ingreso DATE NOT NULL,
    habilitado BIT DEFAULT 1,
    estado_personal NVARCHAR(15) NOT NULL DEFAULT 'ACTIVO' CHECK (estado_personal IN ('ACTIVO','SUSPENDIDO','CESADO','DESCANSO_MEDICO')),
    observaciones NVARCHAR(255),
    horas_sueno_requeridas INT DEFAULT 8,
    horas_semanales_objetivo DECIMAL(5,2) NULL,
    CONSTRAINT fk_conductor_usuario FOREIGN KEY (id_usuario) REFERENCES USUARIO(id_usuario)
);

CREATE INDEX idx_conductor_modalidad ON CONDUCTOR(modalidad);
CREATE INDEX idx_conductor_estado ON CONDUCTOR(estado_personal);
CREATE INDEX idx_conductor_base ON CONDUCTOR(base);

-- Tabla para plantillas de turnos recurrentes
CREATE TABLE PLANTILLA_TURNO (
    id_plantilla INT IDENTITY(1,1) PRIMARY KEY,
    nombre NVARCHAR(100) NOT NULL,
    descripcion NVARCHAR(255),
    estado BIT DEFAULT 1,
    es_rotativo BIT DEFAULT 0
);

-- Tabla TURNO (con mejoras)
CREATE TABLE TURNO (
    id_turno INT IDENTITY(1,1) PRIMARY KEY,
    id_conductor INT NOT NULL,
    id_semana INT NULL,
    dia_semana NVARCHAR(10) NOT NULL CHECK (dia_semana IN ('LUNES','MARTES','MIERCOLES','JUEVES','VIERNES','SABADO','DOMINGO')),
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL,
    carreras INT DEFAULT 0,
    fecha DATE NOT NULL,
    saldo_tiempo INT DEFAULT 0, -- minutos
    tiempo_laborado INT DEFAULT 0, -- minutos
    turno_anterior INT NULL,
    observaciones NVARCHAR(255) NULL,
    CONSTRAINT fk_turno_conductor FOREIGN KEY (id_conductor) REFERENCES CONDUCTOR(id_conductor),
    CONSTRAINT fk_turno_semana FOREIGN KEY (id_semana) REFERENCES SEMANA_PROGRAMACION(id_semana)
);

-- Agregar la auto-referencia después de crear la tabla
ALTER TABLE TURNO ADD CONSTRAINT fk_turno_anterior FOREIGN KEY (turno_anterior) REFERENCES TURNO(id_turno);

CREATE INDEX idx_turno_fecha ON TURNO(fecha);
CREATE INDEX idx_turno_conductor_fecha ON TURNO(id_conductor, fecha);
CREATE INDEX idx_turno_dia_semana ON TURNO(dia_semana);
CREATE INDEX idx_turno_semana ON TURNO(id_semana);

-- Tabla SOLICITUD_CAMBIO_TURNO (con mejoras)
CREATE TABLE SOLICITUD_CAMBIO_TURNO (
    id_solicitud INT IDENTITY(1,1) PRIMARY KEY,
    fecha_solicitud DATETIME2 DEFAULT GETDATE(),
    fecha_cambio DATE NOT NULL,
    id_conductor_solicitante INT NOT NULL,
    id_turno_original INT NOT NULL,
    id_conductor_destino INT NOT NULL,
    id_turno_nuevo INT NOT NULL,
    estado_confirmacion_companero NVARCHAR(10) DEFAULT 'PENDIENTE' CHECK (estado_confirmacion_companero IN ('PENDIENTE','ACEPTADO','RECHAZADO')),
    estado_confirmacion_admin NVARCHAR(10) DEFAULT 'PENDIENTE' CHECK (estado_confirmacion_admin IN ('PENDIENTE','ACEPTADO','RECHAZADO')),
    mensaje NVARCHAR(255),
    observaciones NVARCHAR(255),
    validacion_horas_sueno BIT,
    validacion_coincidencia BIT,
    validacion_saldo_tiempo BIT,
    fecha_respuesta_companero DATETIME2 NULL,
    fecha_respuesta_admin DATETIME2 NULL,
    id_admin INT NULL,
    CONSTRAINT fk_solicitud_conductor_solicitante FOREIGN KEY (id_conductor_solicitante) REFERENCES CONDUCTOR(id_conductor),
    CONSTRAINT fk_solicitud_conductor_destino FOREIGN KEY (id_conductor_destino) REFERENCES CONDUCTOR(id_conductor),
    CONSTRAINT fk_solicitud_turno_original FOREIGN KEY (id_turno_original) REFERENCES TURNO(id_turno),
    CONSTRAINT fk_solicitud_turno_nuevo FOREIGN KEY (id_turno_nuevo) REFERENCES TURNO(id_turno),
    CONSTRAINT fk_solicitud_admin FOREIGN KEY (id_admin) REFERENCES USUARIO(id_usuario)
);

CREATE INDEX idx_solicitud_fecha ON SOLICITUD_CAMBIO_TURNO(fecha_solicitud);
CREATE INDEX idx_solicitud_fecha_cambio ON SOLICITUD_CAMBIO_TURNO(fecha_cambio);
CREATE INDEX idx_solicitud_estado ON SOLICITUD_CAMBIO_TURNO(estado_confirmacion_admin, estado_confirmacion_companero);
CREATE INDEX idx_solicitud_conductores ON SOLICITUD_CAMBIO_TURNO(id_conductor_solicitante, id_conductor_destino);

-- Tabla NOTIFICACION (con mejoras)
CREATE TABLE NOTIFICACION (
    id_notificacion INT IDENTITY(1,1) PRIMARY KEY,
    id_usuario INT NOT NULL,
    remitente NVARCHAR(100) NOT NULL,
    mensaje NVARCHAR(255) NOT NULL,
    fecha DATETIME2 DEFAULT GETDATE(),
    leido BIT DEFAULT 0,
    tipo_notificacion NVARCHAR(30) DEFAULT 'GENERAL' CHECK (tipo_notificacion IN ('SOLICITUD_CAMBIO','APROBACION','RECHAZO','PROGRAMACION','SISTEMA','GENERAL')),
    id_referencia INT NULL, -- ID de la solicitud, turno u otra entidad relacionada
    CONSTRAINT fk_notificacion_usuario FOREIGN KEY (id_usuario) REFERENCES USUARIO(id_usuario)
);

CREATE INDEX idx_notificacion_usuario ON NOTIFICACION(id_usuario);
CREATE INDEX idx_notificacion_leido ON NOTIFICACION(leido);
CREATE INDEX idx_notificacion_tipo ON NOTIFICACION(tipo_notificacion);
CREATE INDEX idx_notificacion_fecha ON NOTIFICACION(fecha);

-- Tabla AUDITORIA (con mejoras)
CREATE TABLE AUDITORIA (
    id_auditoria INT IDENTITY(1,1) PRIMARY KEY,
    id_usuario INT NOT NULL,
    accion NVARCHAR(100) NOT NULL,
    descripcion NVARCHAR(MAX),
    fecha_hora DATETIME2 DEFAULT GETDATE(),
    tipo_accion NVARCHAR(20) DEFAULT 'OTRO' CHECK (tipo_accion IN ('LOGIN','CAMBIO_TURNO','EDICION_USUARIO','EDICION_CONDUCTOR','GENERACION_REPORTE','OTRO')),
    ip_origen NVARCHAR(50) NULL,
    tabla_afectada NVARCHAR(50) NULL,
    id_registro_afectado INT NULL,
    CONSTRAINT fk_auditoria_usuario FOREIGN KEY (id_usuario) REFERENCES USUARIO(id_usuario)
);

CREATE INDEX idx_auditoria_usuario ON AUDITORIA(id_usuario);
CREATE INDEX idx_auditoria_tipo ON AUDITORIA(tipo_accion);
CREATE INDEX idx_auditoria_fecha ON AUDITORIA(fecha_hora);

-- Tabla para configurar preferencias de notificaciones
CREATE TABLE PREFERENCIAS_NOTIFICACION (
    id_preferencia INT IDENTITY(1,1) PRIMARY KEY,
    id_usuario INT NOT NULL,
    notificacion_email BIT DEFAULT 1,
    notificacion_sistema BIT DEFAULT 1,
    CONSTRAINT fk_preferencias_usuario FOREIGN KEY (id_usuario) REFERENCES USUARIO(id_usuario)
);

-- Tabla para gestionar reportes generados
CREATE TABLE REPORTE (
    id_reporte INT IDENTITY(1,1) PRIMARY KEY,
    id_usuario INT NOT NULL,
    tipo_reporte NVARCHAR(50) NOT NULL,
    parametros NVARCHAR(MAX),
    fecha_generacion DATETIME2 DEFAULT GETDATE(),
    ruta_archivo NVARCHAR(255),
    CONSTRAINT fk_reporte_usuario FOREIGN KEY (id_usuario) REFERENCES USUARIO(id_usuario)
);

-- Insertar parámetros básicos del sistema
INSERT INTO PARAMETRO_SISTEMA (clave, valor, descripcion)
VALUES 
('MIN_HORAS_SUENO', '8', 'Mínimo de horas de sueño requeridas entre turnos'),
('MAX_HORAS_TRABAJO_PART_TIME', '23.75', 'Máximo de horas de trabajo semanal para Part-Time (23h 45min)'),
('MAX_HORAS_TRABAJO_FULL_TIME', '48', 'Máximo de horas de trabajo semanal para Full-Time'),
('DIAS_EXPIRACION_PASSWORD', '90', 'Número de días antes de que expire una contraseña'),
('VERSION_SISTEMA', '1.0', 'Versión actual del sistema');
GO

-- Verificar si los usuarios ya existen antes de insertar
IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE dni = '73056176')
BEGIN
    -- Insertar usuario administrador Mauro Alvan De la Cruz
    INSERT INTO USUARIO (dni, nombres, apellidos, correo, telefono, contacto_emergencia, fecha_nacimiento, contrasena_hash, rol, foto_perfil, estado)
    VALUES 
    ('73056176', N'Mauro', N'Alvan De la Cruz', N'mauro.alvan@ejemplo.com', N'999123456', N'Paula De la Cruz', '1993-04-10', N'$2a$10$vLjDUwUVZ0U7myiziiNP8u/p2ywauAnaVwAsmlzCYEb8.Kq4u.GzO', N'ADMINISTRADOR', NULL, N'ACTIVO');
END
GO

IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE dni = '74379748')
BEGIN
    -- Insertar usuario conductor Karolay Huamani Villavicencio
    INSERT INTO USUARIO (dni, nombres, apellidos, correo, telefono, contacto_emergencia, fecha_nacimiento, contrasena_hash, rol, foto_perfil, estado)
    VALUES 
    ('74379748', N'Karolay', N'Huamani Villavicencio', N'karolay.huamani@ejemplo.com', N'988654321', N'José Huamani', '1998-10-22', N'$2a$10$jEH6/mAt6pyY5ZpI7kFMqeKY6WSVpqQeU3ZqQuSljqAGLnbfCobBC', N'CONDUCTOR', NULL, N'ACTIVO');
END
GO

-- Verificar si el conductor ya existe antes de insertar
IF NOT EXISTS (SELECT 1 FROM CONDUCTOR c 
               JOIN USUARIO u ON c.id_usuario = u.id_usuario 
               WHERE u.dni = '74379748')
BEGIN
    -- Ahora insertamos la relación en la tabla CONDUCTOR para Karolay
    INSERT INTO CONDUCTOR (id_usuario, modalidad, base, fecha_ingreso, habilitado, estado_personal, observaciones, horas_sueno_requeridas)
    SELECT id_usuario, N'FIJO', N'BASE C', '2023-06-01', 1, N'ACTIVO', NULL, 8 
    FROM USUARIO WHERE dni = '74379748';
END
GO

-- Crear preferencias de notificación para usuarios existentes que no tengan
INSERT INTO PREFERENCIAS_NOTIFICACION (id_usuario, notificacion_email, notificacion_sistema)
SELECT id_usuario, 1, 1 FROM USUARIO u
WHERE NOT EXISTS (
    SELECT 1 FROM PREFERENCIAS_NOTIFICACION p 
    WHERE p.id_usuario = u.id_usuario
);
GO

-- Procedimiento para calcular tiempo entre turnos
CREATE OR ALTER PROCEDURE sp_calcular_tiempo_entre_turnos
    @id_turno_1 INT,
    @id_turno_2 INT,
    @minutos_entre_turnos INT OUTPUT
AS
BEGIN
    DECLARE @fecha_fin_1 DATETIME;
    DECLARE @fecha_inicio_2 DATETIME;
    
    SELECT @fecha_fin_1 = CAST(fecha AS DATETIME) + CAST(hora_fin AS DATETIME)
    FROM TURNO
    WHERE id_turno = @id_turno_1;
    
    SELECT @fecha_inicio_2 = CAST(fecha AS DATETIME) + CAST(hora_inicio AS DATETIME)
    FROM TURNO
    WHERE id_turno = @id_turno_2;
    
    -- Si el segundo turno es en un día posterior
    IF CAST(@fecha_inicio_2 AS DATE) > CAST(@fecha_fin_1 AS DATE)
    BEGIN
        SET @minutos_entre_turnos = DATEDIFF(MINUTE, @fecha_fin_1, @fecha_inicio_2);
    END
    ELSE -- Si es en el mismo día
    BEGIN
        -- Comprobamos si el inicio del turno 2 es después del fin del turno 1
        IF @fecha_inicio_2 > @fecha_fin_1
            SET @minutos_entre_turnos = DATEDIFF(MINUTE, @fecha_fin_1, @fecha_inicio_2);
        ELSE
            SET @minutos_entre_turnos = 0; -- Turnos solapados
    END
END
GO

-- Procedimiento para validar solicitud de cambio
CREATE OR ALTER PROCEDURE sp_validar_solicitud_cambio
    @id_solicitud INT,
    @resultado BIT OUTPUT,
    @mensaje NVARCHAR(255) OUTPUT
AS
BEGIN
    DECLARE @id_turno_original INT;
    DECLARE @id_turno_nuevo INT;
    DECLARE @id_conductor_solicitante INT;
    DECLARE @id_conductor_destino INT;
    DECLARE @horas_sueno_solicitante INT;
    DECLARE @horas_sueno_destino INT;
    DECLARE @minutos_entre_turnos_solicitante INT;
    DECLARE @minutos_entre_turnos_destino INT;
    DECLARE @tiempo_laborado_solicitante INT;
    DECLARE @tiempo_laborado_destino INT;
    DECLARE @validacion_horas_sueno BIT = 1;
    DECLARE @validacion_coincidencia BIT = 1;
    DECLARE @validacion_saldo_tiempo BIT = 1;
    
    -- Obtener datos de la solicitud
    SELECT 
        @id_turno_original = id_turno_original,
        @id_turno_nuevo = id_turno_nuevo,
        @id_conductor_solicitante = id_conductor_solicitante,
        @id_conductor_destino = id_conductor_destino
    FROM SOLICITUD_CAMBIO_TURNO
    WHERE id_solicitud = @id_solicitud;
    
    -- Obtener horas de sueño requeridas
    SELECT @horas_sueno_solicitante = horas_sueno_requeridas 
    FROM CONDUCTOR WHERE id_conductor = @id_conductor_solicitante;
    
    SELECT @horas_sueno_destino = horas_sueno_requeridas 
    FROM CONDUCTOR WHERE id_conductor = @id_conductor_destino;
    
    -- Para propósito de este ejemplo, establecemos valores simulados
    -- En una implementación real, aquí llamaríamos al procedimiento sp_calcular_tiempo_entre_turnos
    SET @minutos_entre_turnos_solicitante = 480; -- 8 horas
    SET @minutos_entre_turnos_destino = 600; -- 10 horas
    
    -- Validar horas de sueño
    IF @minutos_entre_turnos_solicitante < (@horas_sueno_solicitante * 60) OR 
       @minutos_entre_turnos_destino < (@horas_sueno_destino * 60)
    BEGIN
        SET @validacion_horas_sueno = 0;
    END
    
    -- Validar coincidencia de horas (simplificado para este ejemplo)
    DECLARE @tiempo_turno_original INT;
    DECLARE @tiempo_turno_nuevo INT;
    
    SELECT @tiempo_turno_original = DATEDIFF(MINUTE, hora_inicio, hora_fin)
    FROM TURNO WHERE id_turno = @id_turno_original;
    
    SELECT @tiempo_turno_nuevo = DATEDIFF(MINUTE, hora_inicio, hora_fin)
    FROM TURNO WHERE id_turno = @id_turno_nuevo;
    
    IF ABS(@tiempo_turno_original - @tiempo_turno_nuevo) > 60 -- Diferencia de más de 1 hora
    BEGIN
        SET @validacion_coincidencia = 0;
    END
    
    -- Validar saldo de tiempo (simplificado)
    SET @validacion_saldo_tiempo = 1; -- Asumimos que cumple por ahora
    
    -- Actualizar la solicitud con los resultados de validación
    UPDATE SOLICITUD_CAMBIO_TURNO
    SET 
        validacion_horas_sueno = @validacion_horas_sueno,
        validacion_coincidencia = @validacion_coincidencia,
        validacion_saldo_tiempo = @validacion_saldo_tiempo
    WHERE id_solicitud = @id_solicitud;
    
    -- Definir resultado final
    IF @validacion_horas_sueno = 1 AND @validacion_coincidencia = 1 AND @validacion_saldo_tiempo = 1
    BEGIN
        SET @resultado = 1;
        SET @mensaje = 'Validación exitosa';
    END
    ELSE
    BEGIN
        SET @resultado = 0;
        SET @mensaje = 'La solicitud no cumple con los requisitos: ';
        
        IF @validacion_horas_sueno = 0
            SET @mensaje = @mensaje + 'No se respetan las horas de sueño. ';
            
        IF @validacion_coincidencia = 0
            SET @mensaje = @mensaje + 'No hay coincidencia en las horas de trabajo. ';
            
        IF @validacion_saldo_tiempo = 0
            SET @mensaje = @mensaje + 'Se excede el saldo de tiempo permitido.';
    END
END
GO

-- Función para calcular antigüedad en años, meses y días
CREATE OR ALTER FUNCTION fn_calcular_antiguedad(@fecha_ingreso DATE)
RETURNS NVARCHAR(50)
AS
BEGIN
    DECLARE @hoy DATE = GETDATE();
    DECLARE @anos INT;
    DECLARE @meses INT;
    DECLARE @dias INT;
    DECLARE @resultado NVARCHAR(50);
    
    SET @anos = DATEDIFF(YEAR, @fecha_ingreso, @hoy);
    SET @meses = DATEDIFF(MONTH, DATEADD(YEAR, @anos, @fecha_ingreso), @hoy);
    SET @dias = DATEDIFF(DAY, DATEADD(MONTH, @meses, DATEADD(YEAR, @anos, @fecha_ingreso)), @hoy);
    
    SET @resultado = CAST(@anos AS NVARCHAR) + ' años, ' + 
                     CAST(@meses AS NVARCHAR) + ' meses, ' + 
                     CAST(@dias AS NVARCHAR) + ' días';
                     
    RETURN @resultado;
END
GO

-- Vista para obtener datos de conductor con su antigüedad calculada
CREATE OR ALTER VIEW vw_datos_conductor
AS
SELECT 
    c.id_conductor,
    u.dni,
    u.nombres,
    u.apellidos,
    u.nombres + ' ' + u.apellidos AS nombre_completo,
    c.modalidad,
    c.base,
    c.habilitado,
    c.estado_personal,
    c.fecha_ingreso,
    dbo.fn_calcular_antiguedad(c.fecha_ingreso) AS antiguedad,
    c.observaciones,
    u.correo,
    u.telefono,
    u.foto_perfil
FROM 
    CONDUCTOR c
JOIN 
    USUARIO u ON c.id_usuario = u.id_usuario;
GO

-- Vista para obtener turnos del día actual
CREATE OR ALTER VIEW vw_turnos_hoy
AS
SELECT 
    t.id_turno,
    c.id_conductor,
    u.dni,
    u.nombres + ' ' + u.apellidos AS nombre_completo,
    t.dia_semana,
    t.hora_inicio,
    t.hora_fin,
    t.carreras,
    t.fecha,
    t.tiempo_laborado,
    c.base,
    c.modalidad
FROM 
    TURNO t
JOIN 
    CONDUCTOR c ON t.id_conductor = c.id_conductor
JOIN 
    USUARIO u ON c.id_usuario = u.id_usuario
WHERE 
    t.fecha = CAST(GETDATE() AS DATE);
GO

-- Vista para obtener solicitudes pendientes
CREATE OR ALTER VIEW vw_solicitudes_pendientes
AS
SELECT 
    s.id_solicitud,
    s.fecha_solicitud,
    s.fecha_cambio,
    u_sol.dni AS dni_solicitante,
    u_sol.nombres + ' ' + u_sol.apellidos AS nombre_solicitante,
    u_dest.dni AS dni_destino,
    u_dest.nombres + ' ' + u_dest.apellidos AS nombre_destino,
    t_orig.dia_semana AS dia_original,
    t_orig.hora_inicio AS hora_inicio_original,
    t_orig.hora_fin AS hora_fin_original,
    t_orig.carreras AS carreras_original,
    t_nuevo.dia_semana AS dia_nuevo,
    t_nuevo.hora_inicio AS hora_inicio_nuevo,
    t_nuevo.hora_fin AS hora_fin_nuevo,
    t_nuevo.carreras AS carreras_nuevo,
    s.estado_confirmacion_companero,
    s.estado_confirmacion_admin,
    s.mensaje,
    s.observaciones,
    s.validacion_horas_sueno,
    s.validacion_coincidencia,
    s.validacion_saldo_tiempo
FROM 
    SOLICITUD_CAMBIO_TURNO s
JOIN 
    CONDUCTOR c_sol ON s.id_conductor_solicitante = c_sol.id_conductor
JOIN 
    USUARIO u_sol ON c_sol.id_usuario = u_sol.id_usuario
JOIN 
    CONDUCTOR c_dest ON s.id_conductor_destino = c_dest.id_conductor
JOIN 
    USUARIO u_dest ON c_dest.id_usuario = u_dest.id_usuario
JOIN 
    TURNO t_orig ON s.id_turno_original = t_orig.id_turno
JOIN 
    TURNO t_nuevo ON s.id_turno_nuevo = t_nuevo.id_turno
WHERE 
    s.estado_confirmacion_companero = 'PENDIENTE'
    OR s.estado_confirmacion_admin = 'PENDIENTE';
GO

-- Trigger para crear notificaciones automáticamente al crear solicitud de cambio
CREATE OR ALTER TRIGGER trg_notificacion_solicitud
ON SOLICITUD_CAMBIO_TURNO
AFTER INSERT
AS
BEGIN
    DECLARE @id_conductor_destino INT;
    DECLARE @id_conductor_solicitante INT;
    DECLARE @nombre_solicitante NVARCHAR(200);
    DECLARE @id_solicitud INT;
    DECLARE @id_usuario_destino INT;
    
    -- Obtener datos de la solicitud insertada
    SELECT 
        @id_solicitud = i.id_solicitud,
        @id_conductor_destino = i.id_conductor_destino,
        @id_conductor_solicitante = i.id_conductor_solicitante
    FROM inserted i;
    
    -- Obtener nombre del solicitante
    SELECT @nombre_solicitante = u.nombres + ' ' + u.apellidos
    FROM CONDUCTOR c
    JOIN USUARIO u ON c.id_usuario = u.id_usuario
    WHERE c.id_conductor = @id_conductor_solicitante;
    
    -- Obtener id_usuario del conductor destino
    SELECT @id_usuario_destino = u.id_usuario
    FROM CONDUCTOR c
    JOIN USUARIO u ON c.id_usuario = u.id_usuario
    WHERE c.id_conductor = @id_conductor_destino;
    
    -- Crear notificación para el conductor destino
    INSERT INTO NOTIFICACION (id_usuario, remitente, mensaje, tipo_notificacion, id_referencia)
    VALUES (@id_usuario_destino, 'Sistema', 
            'El conductor ' + @nombre_solicitante + ' ha solicitado un cambio de turno contigo. Solicitud #' + CAST(@id_solicitud AS NVARCHAR),
            'SOLICITUD_CAMBIO', @id_solicitud);
    
    -- Buscar administradores para notificarles
    INSERT INTO NOTIFICACION (id_usuario, remitente, mensaje, tipo_notificacion, id_referencia)
    SELECT u.id_usuario, 'Sistema', 
           'Nueva solicitud de cambio de turno #' + CAST(@id_solicitud AS NVARCHAR) + ' creada por ' + @nombre_solicitante,
           'SOLICITUD_CAMBIO', @id_solicitud
    FROM USUARIO u
    WHERE u.rol = 'ADMINISTRADOR' AND u.estado = 'ACTIVO';
END
GO

-- Confirmar que todo se creó correctamente
PRINT 'Base de datos actualizada exitosamente.';
SELECT 'Tablas creadas: ' + CAST(COUNT(*) AS VARCHAR) AS 'Total de Tablas' FROM sys.tables;
SELECT 'Usuarios disponibles: ' + CAST(COUNT(*) AS VARCHAR) AS 'Total de Usuarios' FROM USUARIO;
GO

ALTER TABLE USUARIO ADD intentos_fallidos INT DEFAULT 0, bloqueado_hasta DATETIME2 NULL;

select*from USUARIO;
select*from CONDUCTOR;

SELECT * FROM CONDUCTOR c INNER JOIN USUARIO u ON c.id_usuario = u.id_usuario

SELECT * FROM USUARIO WHERE rol = 'ADMINISTRADOR';

ALTER TABLE USUARIO
ADD apellido_paterno NVARCHAR(50), apellido_materno NVARCHAR(50);


UPDATE USUARIO
SET apellido_paterno = LEFT(apellidos, CHARINDEX(' ', apellidos + ' ') - 1),
    apellido_materno = LTRIM(SUBSTRING(apellidos, CHARINDEX(' ', apellidos + ' '), LEN(apellidos)))
WHERE dni = '74379748';

SELECT dni, apellido_paterno, apellido_materno FROM USUARIO WHERE dni = '74379748';



ALTER TABLE USUARIO DROP COLUMN apellidos;

UPDATE USUARIO
SET apellido_paterno = 'Alvan', apellido_materno = 'De la Cruz'
WHERE dni = '73056176';


ALTER TABLE CONDUCTOR
ADD apellido_paterno NVARCHAR(50), apellido_materno NVARCHAR(50);

UPDATE CONDUCTOR
SET apellido_paterno = LEFT(apellidos, CHARINDEX(' ', apellidos + ' ') - 1),
    apellido_materno = LTRIM(SUBSTRING(apellidos, CHARINDEX(' ', apellidos + ' '), LEN(apellidos)))
WHERE apellidos IS NOT NULL;


UPDATE USUARIO SET contrasena_hash = '$2a$10$/L8/ntYttjohzFp7J2ouGeImju6WNKldXk6KspHlNSf0YIoorqSjK' WHERE dni = '75610056';

select*from TURNO;


